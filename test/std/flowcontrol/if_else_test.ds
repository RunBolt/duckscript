
fn test_if_hardcoded_true
    valid = set false

    if true
        valid = set true
    end

    assert ${valid}
end

fn test_if_hardcoded_false
    if false
        assert_fail
    end
end

fn test_if_hardcoded_not_false
    valid = set false

    if not false
        valid = set true
    end

    assert ${valid}
end

fn test_if_command_returns_true
    valid = set false

    if set true
        valid = set true
    end

    assert ${valid}
end

fn test_if_condition_true
    valid = set false

    if true and false or true and false or ( true and true or false )
        valid = set true
    end

    assert ${valid}
end

fn test_if_condition_false
    if true and false or true and false or ( true and true or false ) and false
        assert_fail
    end
end

fn test_simple_else
    valid = set false

    if set false
        assert_fail
    else
        valid = set true
    end

    assert ${valid}
end

fn test_simple_elseif
    valid = set false

    if set false
        assert_fail
    elseif set true
        valid = set true
    else
        assert_fail
    end

    assert ${valid}
end

fn test_nested_if
    valid = set false

    if set false
        assert_fail
    elseif set true
        if set true
            valid = set true
        end
    else
        assert_fail
    end

    assert ${valid}
end

fn test_nested_if2
    valid = set false

    value = set false
    if ${value}
        assert_fail
    elseif true
        value = set true

        if not false
            value = set "some text"

            if starts_with ${value} "some"
                valid = set true
            else
                assert_fail
            end
        end
    else
        assert_fail
    end

    assert ${valid}
end

fn test_if_call_command
    text = set test,

    valid = set false
    if ends_with ${text} ,
        valid = set true
    end

    assert ${valid}
end

fn test_if_call_to_functions
    value = _test_return_true
    valid = set false
    if ${value}
        valid = set true
    end
    assert ${valid}

    value = _test_return_false
    valid = set true
    if ${value}
        valid = set false
    end
    assert ${valid}

    valid = set false
    if _test_return_true
        valid = set true
    end
    assert ${valid}

    valid = set true
    if _test_return_false
        valid = set false
    end
    assert ${valid}

    valid = set false
    if not _test_return_false
        valid = set true
    end
    assert ${valid}
end

fn test_eq_empty_strings
    valid = set false

    if eq "" ""
        valid = set true
    end

    assert ${valid}
end

fn test_eq_different_strings
    valid = set true

    if eq "1 2" "1 3"
        valid = set false
    end

    assert ${valid}
end

fn test_not_is_array_empty
    valid = set false

    array = array 1 2 3
    if not array_is_empty ${array}
        valid = set true
    end
    release ${array}

    assert ${valid}
end

fn _test_return_true
    return true
end

fn _test_return_false
    return false
end

